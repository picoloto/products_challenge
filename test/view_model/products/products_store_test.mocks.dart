// Mocks generated by Mockito 5.4.5 from annotations
// in products_challenge/test/view_model/products/products_store_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:products_challenge/model/product/product_model.dart' as _i3;
import 'package:products_challenge/service/product/product_service.dart' as _i4;
import 'package:products_challenge/service/rest_service.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRestService_0 extends _i1.SmartFake implements _i2.RestService {
  _FakeRestService_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProduct_1 extends _i1.SmartFake implements _i3.Product {
  _FakeProduct_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ProductService].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductService extends _i1.Mock implements _i4.ProductService {
  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
        returnValueForMissingStub: _i5.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
      ) as String);

  @override
  _i2.RestService get restService => (super.noSuchMethod(
        Invocation.getter(#restService),
        returnValue: _FakeRestService_0(
          this,
          Invocation.getter(#restService),
        ),
        returnValueForMissingStub: _FakeRestService_0(
          this,
          Invocation.getter(#restService),
        ),
      ) as _i2.RestService);

  @override
  set restService(_i2.RestService? _restService) => super.noSuchMethod(
        Invocation.setter(
          #restService,
          _restService,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<List<_i3.Product>> findAll() => (super.noSuchMethod(
        Invocation.method(
          #findAll,
          [],
        ),
        returnValue: _i6.Future<List<_i3.Product>>.value(<_i3.Product>[]),
        returnValueForMissingStub:
            _i6.Future<List<_i3.Product>>.value(<_i3.Product>[]),
      ) as _i6.Future<List<_i3.Product>>);

  @override
  _i6.Future<_i3.Product> findById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #findById,
          [id],
        ),
        returnValue: _i6.Future<_i3.Product>.value(_FakeProduct_1(
          this,
          Invocation.method(
            #findById,
            [id],
          ),
        )),
        returnValueForMissingStub: _i6.Future<_i3.Product>.value(_FakeProduct_1(
          this,
          Invocation.method(
            #findById,
            [id],
          ),
        )),
      ) as _i6.Future<_i3.Product>);
}
